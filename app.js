'use strict';

const Homey = require('homey');
const ESPEasyUnits = require('./lib/ESPEasyUnits.js');
const Telemetry = require('./lib/Telemetry.js');

class ESPEasy extends Homey.App {

	onInit() {
		if (process.env.DEBUG === '1') {
			require('inspector').open(9222, '0.0.0.0', false);
			process.stdout.write = () => {}
		}

		this.updateTelemetry = this.updateTelemetry.bind(this);

		this.triggers = {};
		this.actions = {};
		this.units = new ESPEasyUnits();

		this.telemetry = new Telemetry({
			host: 'espeasy.homey.joolee.nl',
			siteId: 2
		});
	}

	onUninit() {
		this.telemetry.send('App', 'Uninit', '/app/uninit', {});
	}

	get supportedTasks() {
		if (this._supportedTasks)
			return this._supportedTasks;

		this._supportedTasks = Object.values(Homey.ManagerDrivers.getDrivers()).flatMap(driver => {
			if (driver.taskTypes)
				return driver.taskTypes.map(type => `${type.plugin} - ${type.name}`);
			else
				return [];
		}).sort((a, b) => a.localeCompare(b, undefined, {
			numeric: true
		}));

		this._supportedTasks.unshift('26 - Generic - System Info');

		return this._supportedTasks;
	}

	getI18nString(i18n) {
		const lang = Homey.ManagerI18n.getLanguage();
		if (i18n[lang])
			return i18n[lang];
		else if (i18n['en'])
			return i18n['en'];
		else
			return `Untranslated string: ${i18n}`;
	}

	// This was a re-implementation of Homeylib.getCapability to include custom capabilities
	// I removed Homeylib alltogether to reduce dependencies
	getCapability(capability) {
		return this.getCapabilities()[capability];
	}

	// This was a re-implementation of Homeylib.getCapabilities to include custom capabilities
	// I removed Homeylib alltogether to reduce dependencies
	// The list in assets/json/allCapabilities.json is generated by tools/create-capabilitylist.sh
	// The data source is still HomeyLib
	// Note: Only properties 'title', 'type', 'getable', 'setable', 'min', 'max' and 'uiComponent' are included
	getCapabilities() {
		const defaultCapabilities = require("/assets/json/allCapabilities.json");
		const customCapabilities = this.manifest["capabilities"];

		return {
			...defaultCapabilities,
			...customCapabilities
		};
	}

	updateTelemetry(reason, url, recurse) {
		try {
			const onlineUnits = this.units.listOnline();
			let metrics = {
				"Total tasks": onlineUnits.reduce((numTasks, unit) => numTasks + unit.tasks.length, 0),
				"Total tasks in use": onlineUnits.reduce((numTasks, unit) => {
					numTasks += unit.sensors.length;
					numTasks += unit.getTasksByName(26, 'Generic - System Info', false).length;
					return numTasks;
				}, 0),
				"Total units": this.units.units.length,
				"Total GPIO used": onlineUnits.reduce((numTasks, unit) => numTasks + unit.gpios.length, 0),
			}

			this.telemetry.send('App', reason, url, metrics);
		} catch (error) {
			this.error('Error updating app telemetry:', error);
		}

		if (recurse) {
			this.units.listOnline().forEach(unit => {
				try {
					unit.updateTelemetry(reason, recurse)
				} catch (error) {
					this.error('Error updating unit telemetry:', unit.name, error);
				}
			});
		}
	}
}

module.exports = ESPEasy;
